/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 03:41:51 GMT 2020
 */

package application.share.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import application.share.entity.Lot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lot_ESTest extends Lot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lot lot0 = new Lot((String) null, "", (String) null, (String) null, "");
      lot0.setUserName("v :C }Jhy");
      assertNull(lot0.getState());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lot lot0 = new Lot("Tw", "Tw", "Tw", ".E#O+6vhYKy/j", ";mV(O];?+x");
      lot0.setMoney(".E#O+6vhYKy/j");
      assertNull(lot0.getState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      String string0 = lot0.getUserName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lot lot0 = new Lot("Tw", "Tw", "Tw", ".E#O+6vhYKy/j", ";mV(O];?+x");
      String string0 = lot0.getUserName();
      assertEquals(".E#O+6vhYKy/j", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lot lot0 = new Lot("", "", "'e3jLjz27p[", "", "'e3jLjz27p[");
      String string0 = lot0.getUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lot lot0 = new Lot("Tw", "Tw", "Tw", ".E#O+6vhYKy/j", ";mV(O];?+x");
      lot0.setState(";mV(O];?+x");
      String string0 = lot0.getState();
      assertEquals(";mV(O];?+x", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lot lot0 = new Lot("", (String) null, "");
      String string0 = lot0.getPrijectId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lot lot0 = new Lot((String) null, "", (String) null, (String) null, "");
      String string0 = lot0.getPrijectId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lot lot0 = new Lot("", "", (String) null, "", "");
      String string0 = lot0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lot lot0 = new Lot((String) null, "", "", "", "");
      String string0 = lot0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      String string0 = lot0.getMoney();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lot lot0 = new Lot("application.share.entity.Lot", "M?2 AY", "application.share.entity.Lot", "M?2 AY", "application.share.entity.Lot");
      String string0 = lot0.getMoney();
      assertEquals("application.share.entity.Lot", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lot lot0 = new Lot("]C!Ts$2I=;k", "]C!Ts$2I=;k", "]C!Ts$2I=;k", "", "");
      String string0 = lot0.getMoney();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lot lot0 = new Lot((String) null, "", (String) null, (String) null, "");
      String string0 = lot0.getAuctionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lot lot0 = new Lot("", "", "'e3jLjz27p[", "", "'e3jLjz27p[");
      lot0.setAuctionId("'e3jLjz27p[");
      String string0 = lot0.getAuctionId();
      assertEquals("'e3jLjz27p[", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      String string0 = lot0.getAuctionId();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lot lot0 = new Lot("#gK@OVx$=RTeP#j#z~", "z{EqieI6", "");
      String string0 = lot0.getPrijectId();
      assertEquals("z{EqieI6", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lot lot0 = new Lot("", "application.share.entity.Lot", "application.share.entity.Lot");
      // Undeclared exception!
      try { 
        lot0.getMoney();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("application.share.entity.Lot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      lot0.setPrijectId("ra.T~J8*9l^RS]xQ&,g");
      assertNull(lot0.getState());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lot lot0 = new Lot("#gK@OVx$=RTeP#j#z~", "z{EqieI6", "");
      // Undeclared exception!
      try { 
        lot0.setMoney("z{EqieI6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("application.share.entity.Lot", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lot lot0 = new Lot("tn>`", "", "", "tn>`", "");
      String string0 = lot0.getState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lot lot0 = new Lot("+I;CJ<V]M2O5p*", "+I;CJ<V]M2O5p*", "+I;CJ<V]M2O5p*");
      // Undeclared exception!
      try { 
        lot0.getUserName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("application.share.entity.Lot", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lot lot0 = new Lot((String) null, "v_", "x.Ddpp6xol8u");
      // Undeclared exception!
      try { 
        lot0.setUserName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("application.share.entity.Lot", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      lot0.setName((String) null);
      assertNull(lot0.getState());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lot lot0 = new Lot("tn>`", "", "", "tn>`", "");
      lot0.setState("");
      String string0 = lot0.getState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lot lot0 = new Lot("", "", "ZK5qPu~aUV:5?oV", (String) null, (String) null);
      String string0 = lot0.getName();
      assertEquals("ZK5qPu~aUV:5?oV", string0);
      assertNotNull(string0);
  }
}
